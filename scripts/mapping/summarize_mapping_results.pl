#!/usr/bin/env perl
use strict;
use warnings;
use Data::Dumper;
use Tie::File;


# 1: a dir as generated by the RUN_MAPPING_PIPELINE.sh pipeline 

my $execDir=`dirname $0`;chomp $execDir;

my $summaryUni = ""; my  $errorsUni = ""; 

$errorsUni .= sprintf ("%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n", "sample","type", "subst","insertions","deletions","reads","indels_per_100","indels_per_read","subst_per_100","subst_per_read");
$summaryUni .= join("\t", ("sample", "#Bases", "#Reads", "Length(mean)", "Length(max)", "Length(min)", "Len(sd)", "REFbases", "Mapped", "%Mapped", "Coverage","#not covered", "#Ns", "#subs", "#insertions", "#deletions", "#insertions length", "#deletion length"))."\n";

my $pass=$ARGV[0];
die "No such File or Directory: $pass " if (! -e $pass);
chomp($pass);
my ($pass_clean) = $pass =~ /.*\/(.*)_mapping/g;
print "processing $pass_clean\n";
my $prefix= $pass."/".$pass_clean;
$errorsUni .=  $pass_clean."\t";
$summaryUni .=  $pass_clean."\t";
tie my @csv2, 'Tie::File', $prefix.".uni.alignment.tab.csv" or die "error: $!\n";
$errorsUni .=  join("\t", split(",",$csv2[-1]))."\n";

my $readInfo;
if (-e $pass."/read.info") {
    open (TMP_FILE, "<$pass/read.info");
    $readInfo = do { local $/; <TMP_FILE> };
    close TMP_FILE;
}else {   
    $readInfo = `$execDir/FastaStats.pl -q $pass/INPUT | tee $pass/read.info`;
}
$readInfo =~ s/.*\s([\d\.]+)/$1 /g;
my @readInfo = split(" ", $readInfo); 
$summaryUni .= join("\t", ($readInfo[0], $readInfo[1], $readInfo[3], $readInfo[2], $readInfo[5], $readInfo[8])) ."\t";

my $refInfo;
if (-e $pass."/ref.info") {
    open (TMP_FILE, "<$pass/ref.info");
    $refInfo = do { local $/; <TMP_FILE> };
    close TMP_FILE;
}else {
	$refInfo = `$execDir/FastaStats.pl -f $pass/REFERENCE | tee $pass/ref.info `;
}
$refInfo =~ s/.*\s([\d\.]+)/$1 /g;
my @refInfo = split(" ", $refInfo); 
$summaryUni .= $refInfo[0]."\t";

my $mappedUni;
if (-e $pass."/mapping.uni.info") {
    open (TMP_FILE, "<$pass/mapping.uni.info");
    $mappedUni = do { local $/; <TMP_FILE> };
    close TMP_FILE;
}else {
	$mappedUni = `samtools idxstats $prefix.uni.sorted.bam | tee $pass/mapping.uni.info`;
}
$mappedUni =~ s/[^\s]+\s+[^\s]+\s+([^\s]+).*/$1 /g;
$summaryUni .= join(":", split(" ", $mappedUni))."\t";
my $mappedTotalUni = 0; map{$mappedTotalUni+=$_} split(" ", $mappedUni);
$summaryUni .= sprintf("%f\t", ($mappedTotalUni/$readInfo[1])*100);

my $covUni;
if (-e "$prefix.uni.meanCovs") {
    open (TMP_FILE, "<$prefix.uni.meanCovs");
    $covUni = do { local $/; <TMP_FILE> };
    close TMP_FILE;
}else {
    print STDERR "Mean coverages missing for $pass/$prefix. Something went wrong in the mapping pipeline. Pleas check logfiles.\n";
    $covUni = "undef";
}
$covUni=(split(" ", $covUni))[-1];
$summaryUni .= $covUni."\t";

$summaryUni .= "\n";

open (SUMMARYUNI, ">", "$pass/mapping_summaryUni.csv");
print SUMMARYUNI $summaryUni;
close SUMMARYUNI;

open (ERRORSUNI, ">", "$pass/mapping_errorsUni.csv");
print ERRORSUNI $errorsUni;
close ERRORSUNI;

