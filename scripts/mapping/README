README for the evaluation of mapping results.

The following scripts were used:

CountMeanCov.pl
  Calculates the mean coverage separately for each chromosome and plasmid in the genome reference file
  Requires: coverage file

calc_coverage.sh:
  Computes the per base coverage of the data set
  Requires: sam/bam file of mapped reads
  Result: *.cov file of a tab separated coverage file.
  
calculate _accuracy.py:
  Computes the accuracy of the reads after mapping.
  Requires: sam/bam file of mapped reads; Reference file that was used for mapping
  Result: Tab separated file 

filter_unique.pl:
  Script to compute a mapping statistic plus reports a sam file of all the uniquely mapped reads.
  Requires: sam file after mapping, number of raw reads (optional otherwise replace by 0)
  Results: Mapping statistic plus samfile of uniquely/ unambiguous mapped reads

gobwa.sh:
  Script to map the reads and processing the resulting file using samtools. In addition it filters the unique mapped reads and process them using samtools
  Requires: Output destination; Fastq file of reads; Reference file
  Output: .sam,.bam files plus the calculated MD tag.

indel_summary_table.R:
  R code for creating a Latex table summarizing the occurrence of substitutions, insertion and deletions on the reads
  Requires: Tab separated Table (result from read_bam.py)
  Output:  Latex Table

FastaStats.pl:
  Perl script to get primary read and read length statistics of an fasta or fastq file

read_bam.py:
  Computes the number of substitutions, insertions and deletions per read and prints the result 
  Requires: Metafile (see alignment.txt, Reference file
  Output: summary table over all reads per data sets. 

RUN_MAPPING_PIPELINE:
  Executes the whole mapping pipeline used for this analysis.
  Requires: raw read file (.fastq), reference file (.fasta)
  Output: all the summary files used for the analysis of a particular data set (*.csv)

runutils.py:
  A library implementation used by read_bam.py
  Requires: nothing
  Output: nothing

summarize_mapping_results.pl:
  Creates tables based on the output of scripts used in this analysis.
  Requires: Folder structure as generated by RUN_MAPPING_PIPELINE.sh 
  Output: CSV of the summarized the results
